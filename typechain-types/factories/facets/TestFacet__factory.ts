/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TestFacet, TestFacetInterface } from "../../facets/TestFacet";

const _abi = [
  {
    inputs: [],
    name: "test1Func1",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "va",
        type: "uint256",
      },
    ],
    name: "test1Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test1Func3",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610240908161001c8239f35b600080fdfe6080604090808252600436101561001557600080fd5b600091823560e01c91826311046047146101ec5750816319e3b53314610061575063266c28951461004557600080fd5b3461005e57602036600319011261005e57600435815580f35b80fd5b823461005e578060031936011261005e5781519181927fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131e92835494600186811c958188169788156101e2575b60209889891081146101ce578887528993929181156101aa5750600114610155575b50505082939450601f801994859203011682019482861067ffffffffffffffff8711176101415785929391838652818452845191828186015281955b8387106101295750508394508582601f949501015201168101030190f35b8681018201518988018901529581019588955061010b565b634e487b7160e01b82526041600452602482fd5b845290915082907fb5c239a29faf02594141bbc5e6982a9b85ba2b4d59c3ed3baaf4cb8e5e11cbef5b87831061019757509495508594508301018587806100cf565b805486840185015291830191810161017e565b60ff191684880152509596879650151560051b8501909101915086905087806100cf565b634e487b7160e01b86526022600452602486fd5b96607f16966100ad565b839034610206578160031936011261020657602091548152f35b5080fdfea26469706673582212204aa2220feef5addec0fe6c1c8451592737b96af20314963a7a2e3c8bbd44d9df64736f6c63430008130033";

type TestFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestFacet__factory extends ContractFactory {
  constructor(...args: TestFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestFacet__factory {
    return super.connect(runner) as TestFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFacetInterface {
    return new Interface(_abi) as TestFacetInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestFacet {
    return new Contract(address, _abi, runner) as unknown as TestFacet;
  }
}
