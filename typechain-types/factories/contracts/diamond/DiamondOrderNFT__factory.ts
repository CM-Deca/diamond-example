/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DiamondOrderNFT,
  DiamondOrderNFTInterface,
  IDiamond,
  DiamondArgsStruct,
} from "../../../contracts/diamond/DiamondOrderNFT";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamond.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamond.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "init",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "initCalldata",
            type: "bytes",
          },
        ],
        internalType: "struct DiamondArgs",
        name: "_args",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "FunctionNotFound",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x604060808152346101435761035c8038038061001a81610250565b92833981019082818303126101435780516001600160401b0391908281116101435781019083601f830112156101435781519161005e61005984610275565b610250565b9280845260208094019084600591821b8401019287841161014357858101925b84841061015e5750505050508181015190838211610143570191606083850312610143576100aa610231565b926100b48161028c565b84526100c183820161028c565b838501528581015190828211610143570184601f82011215610143578051918211610148576100f8601f8301601f19168401610250565b9482865283838301011161014357908593929160005b82811061012d575050906000918501015201525160bb90816102a18239f35b818101840151878201850152879550830161010e565b600080fd5b634e487b7160e01b600052604160045260246000fd5b835188811161014357820160609081601f19828d03011261014357610181610231565b9161018d8a830161028c565b83528c8201516003811015610143578a840152810151908a821161014357018a603f8201121561014357888101516101c761005982610275565b918d8b848481520192881b820101908d821161014357908e8c959396949201955b8187106102035750508394508d82015281520193019261007e565b90919395809395505163ffffffff60e01b8116810361014357818d92918392520192019492908b94926101e8565b60405190606082016001600160401b0381118382101761014857604052565b6040519190601f01601f191682016001600160401b0381118382101761014857604052565b6001600160401b0381116101485760051b60200190565b51906001600160a01b03821682036101435756fe60806040523615608357600080356001600160e01b0319168082527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c60205260408220546001600160a01b0316908115606f5750818091368280378136915af43d82803e15606b573d90f35b3d90fd5b630a82dd7360e31b60805260845260246080fd5b00fea2646970667358221220d17921ecac4f0b0c773390900238120c02dfa34c713bb6849922f89219ebd93964736f6c63430008130033";

type DiamondOrderNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondOrderNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondOrderNFT__factory extends ContractFactory {
  constructor(...args: DiamondOrderNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _diamondCut: IDiamond.FacetCutStruct[],
    _args: DiamondArgsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_diamondCut, _args, overrides || {});
  }
  override deploy(
    _diamondCut: IDiamond.FacetCutStruct[],
    _args: DiamondArgsStruct,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_diamondCut, _args, overrides || {}) as Promise<
      DiamondOrderNFT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DiamondOrderNFT__factory {
    return super.connect(runner) as DiamondOrderNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondOrderNFTInterface {
    return new Interface(_abi) as DiamondOrderNFTInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DiamondOrderNFT {
    return new Contract(address, _abi, runner) as unknown as DiamondOrderNFT;
  }
}
