/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { AppDiaInit, AppDiaInitInterface } from "../../diamond/AppDiaInit";

const _abi = [
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601357606b908160198239f35b600080fdfe6004361015600c57600080fd5b6000803560e01c63e1c7392a14602157600080fd5b346032578060031936011260325780f35b80fdfea264697066735822122079babbf2f79eea4ac63b39208ab18483213bb59bccdf28da0ae188b7c839918864736f6c63430008130033";

type AppDiaInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AppDiaInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AppDiaInit__factory extends ContractFactory {
  constructor(...args: AppDiaInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AppDiaInit & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AppDiaInit__factory {
    return super.connect(runner) as AppDiaInit__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AppDiaInitInterface {
    return new Interface(_abi) as AppDiaInitInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AppDiaInit {
    return new Contract(address, _abi, runner) as unknown as AppDiaInit;
  }
}
