/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AppDia",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppDia__factory>;
    getContractFactory(
      name: "AppDiaInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppDiaInit__factory>;
    getContractFactory(
      name: "DiamondOrderNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondOrderNFT__factory>;
    getContractFactory(
      name: "IOrderSVG",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderSVG__factory>;
    getContractFactory(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondCutFacet__factory>;
    getContractFactory(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondLoupeFacet__factory>;
    getContractFactory(
      name: "TestFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFacet__factory>;
    getContractFactory(
      name: "TestFacet2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFacet2__factory>;
    getContractFactory(
      name: "_IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts._IERC20__factory>;
    getContractFactory(
      name: "IdApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdApp__factory>;
    getContractFactory(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamond__factory>;
    getContractFactory(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondCut__factory>;
    getContractFactory(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDiamondLoupe__factory>;
    getContractFactory(
      name: "IOrderbook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderbook__factory>;
    getContractFactory(
      name: "ERROR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERROR__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "OrderNFTStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderNFTStorage__factory>;

    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AppDia",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppDia>;
    getContractAt(
      name: "AppDiaInit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppDiaInit>;
    getContractAt(
      name: "DiamondOrderNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondOrderNFT>;
    getContractAt(
      name: "IOrderSVG",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderSVG>;
    getContractAt(
      name: "DiamondCutFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondCutFacet>;
    getContractAt(
      name: "DiamondLoupeFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondLoupeFacet>;
    getContractAt(
      name: "TestFacet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFacet>;
    getContractAt(
      name: "TestFacet2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFacet2>;
    getContractAt(
      name: "_IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts._IERC20>;
    getContractAt(
      name: "IdApp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IdApp>;
    getContractAt(
      name: "IDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamond>;
    getContractAt(
      name: "IDiamondCut",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondCut>;
    getContractAt(
      name: "IDiamondLoupe",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDiamondLoupe>;
    getContractAt(
      name: "IOrderbook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderbook>;
    getContractAt(
      name: "ERROR",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERROR>;
    getContractAt(
      name: "LibDiamond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "OrderNFTStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderNFTStorage>;

    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AppDia",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppDia>;
    deployContract(
      name: "AppDiaInit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppDiaInit>;
    deployContract(
      name: "DiamondOrderNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondOrderNFT>;
    deployContract(
      name: "IOrderSVG",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderSVG>;
    deployContract(
      name: "DiamondCutFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "TestFacet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFacet>;
    deployContract(
      name: "TestFacet2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFacet2>;
    deployContract(
      name: "_IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts._IERC20>;
    deployContract(
      name: "IdApp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IdApp>;
    deployContract(
      name: "IDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IOrderbook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderbook>;
    deployContract(
      name: "ERROR",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERROR>;
    deployContract(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "OrderNFTStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderNFTStorage>;

    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "AppDia",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppDia>;
    deployContract(
      name: "AppDiaInit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppDiaInit>;
    deployContract(
      name: "DiamondOrderNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondOrderNFT>;
    deployContract(
      name: "IOrderSVG",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderSVG>;
    deployContract(
      name: "DiamondCutFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondCutFacet>;
    deployContract(
      name: "DiamondLoupeFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DiamondLoupeFacet>;
    deployContract(
      name: "TestFacet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFacet>;
    deployContract(
      name: "TestFacet2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFacet2>;
    deployContract(
      name: "_IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts._IERC20>;
    deployContract(
      name: "IdApp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IdApp>;
    deployContract(
      name: "IDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamond>;
    deployContract(
      name: "IDiamondCut",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondCut>;
    deployContract(
      name: "IDiamondLoupe",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDiamondLoupe>;
    deployContract(
      name: "IOrderbook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderbook>;
    deployContract(
      name: "ERROR",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERROR>;
    deployContract(
      name: "LibDiamond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDiamond>;
    deployContract(
      name: "OrderNFTStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderNFTStorage>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
