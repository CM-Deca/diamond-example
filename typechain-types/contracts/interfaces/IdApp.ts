/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Type {
  export type UserStruct = {
    point: BigNumberish;
    score: BigNumberish;
    name: string;
    img: string;
    app: string;
    user: AddressLike;
  };

  export type UserStructOutput = [
    point: bigint,
    score: bigint,
    name: string,
    img: string,
    app: string,
    user: string
  ] & {
    point: bigint;
    score: bigint;
    name: string;
    img: string;
    app: string;
    user: string;
  };

  export type CreditStruct = {
    point: BigNumberish;
    score: BigNumberish;
    app: string;
  };

  export type CreditStructOutput = [
    point: bigint,
    score: bigint,
    app: string
  ] & { point: bigint; score: bigint; app: string };

  export type UserInfoStruct = {
    name: string;
    img: string;
    user: AddressLike;
    credit: Type.CreditStruct[];
  };

  export type UserInfoStructOutput = [
    name: string,
    img: string,
    user: string,
    credit: Type.CreditStructOutput[]
  ] & {
    name: string;
    img: string;
    user: string;
    credit: Type.CreditStructOutput[];
  };

  export type OrderStruct = {
    key: BytesLike;
    category: BigNumberish;
    option: BigNumberish;
    state: BigNumberish;
    time: BigNumberish;
    price: BigNumberish;
    amount: BigNumberish;
    quantity: BigNumberish;
    fees: BigNumberish;
    pay: AddressLike;
    item: AddressLike;
    owner: AddressLike;
    market: AddressLike;
  };

  export type OrderStructOutput = [
    key: string,
    category: bigint,
    option: bigint,
    state: bigint,
    time: bigint,
    price: bigint,
    amount: bigint,
    quantity: bigint,
    fees: bigint,
    pay: string,
    item: string,
    owner: string,
    market: string
  ] & {
    key: string;
    category: bigint;
    option: bigint;
    state: bigint;
    time: bigint;
    price: bigint;
    amount: bigint;
    quantity: bigint;
    fees: bigint;
    pay: string;
    item: string;
    owner: string;
    market: string;
  };
}

export declare namespace IdApp {
  export type ServiceStruct = { id: BigNumberish; service: AddressLike };

  export type ServiceStructOutput = [id: bigint, service: string] & {
    id: bigint;
    service: string;
  };

  export type InfoStruct = {
    name: string;
    symbol: string;
    version: string;
    url: string;
    description: string;
  };

  export type InfoStructOutput = [
    name: string,
    symbol: string,
    version: string,
    url: string,
    description: string
  ] & {
    name: string;
    symbol: string;
    version: string;
    url: string;
    description: string;
  };
}

export interface IdAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add_service"
      | "ban_check"
      | "ban_user"
      | "check_permission"
      | "credit_decrease_point"
      | "credit_decrease_point_score"
      | "credit_decrease_score"
      | "credit_get_point"
      | "credit_get_point_score"
      | "credit_get_score"
      | "credit_get_user"
      | "credit_get_user_info"
      | "credit_increase_point"
      | "credit_increase_point_score"
      | "credit_increase_score"
      | "credit_set_point"
      | "credit_set_point_score"
      | "credit_set_score"
      | "description"
      | "get_service"
      | "history_get"
      | "history_get_all"
      | "history_get_by_index"
      | "history_get_count"
      | "history_push"
      | "history_remove"
      | "history_set"
      | "history_set_state"
      | "history_transfer"
      | "info"
      | "name"
      | "service"
      | "set_auth"
      | "set_description"
      | "set_info"
      | "set_name"
      | "set_permission"
      | "set_service"
      | "set_symbol"
      | "set_url"
      | "set_user_img"
      | "set_user_name"
      | "set_user_profile"
      | "set_version"
      | "symbol"
      | "url"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_service",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ban_check",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ban_user",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "check_permission",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_point",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_point_score",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_decrease_score",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_point",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_point_score",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_score",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_user",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_get_user_info",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_point",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_point_score",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_increase_score",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_point",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_point_score",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "credit_set_score",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_service",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "history_get",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_all",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_by_index",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_get_count",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_push",
    values: [Type.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "history_remove",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set",
    values: [Type.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "history_set_state",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "history_transfer",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "service",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_auth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_description",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_info",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "set_name", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_permission",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_service",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "set_symbol", values: [string]): string;
  encodeFunctionData(functionFragment: "set_url", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set_user_img",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_user_name",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_user_profile",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "set_version", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "url", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "add_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ban_check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ban_user", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "check_permission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_decrease_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_get_user_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_increase_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_point",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_point_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credit_set_score",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_all",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_by_index",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_get_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_push",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_remove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_set_state",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "history_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "service", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_auth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_permission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_service",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_url", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_user_img",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_user_name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_user_profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_version",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "url", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface IdApp extends BaseContract {
  connect(runner?: ContractRunner | null): IdApp;
  waitForDeployment(): Promise<this>;

  interface: IdAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add_service: TypedContractMethod<
    [_service: AddressLike],
    [bigint],
    "nonpayable"
  >;

  ban_check: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  ban_user: TypedContractMethod<
    [_user: AddressLike, _state: boolean],
    [void],
    "nonpayable"
  >;

  check_permission: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  credit_decrease_point: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  credit_decrease_point_score: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  credit_decrease_score: TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  credit_get_point: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  credit_get_point_score: TypedContractMethod<
    [_user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  credit_get_score: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  credit_get_user: TypedContractMethod<
    [_user: AddressLike],
    [Type.UserStructOutput],
    "view"
  >;

  credit_get_user_info: TypedContractMethod<
    [_user: AddressLike],
    [Type.UserInfoStructOutput],
    "view"
  >;

  credit_increase_point: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  credit_increase_point_score: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  credit_increase_score: TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  credit_set_point: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [void],
    "nonpayable"
  >;

  credit_set_point_score: TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  credit_set_score: TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  description: TypedContractMethod<[], [string], "view">;

  get_service: TypedContractMethod<[], [IdApp.ServiceStructOutput[]], "view">;

  history_get: TypedContractMethod<
    [_key: BytesLike],
    [Type.OrderStructOutput],
    "view"
  >;

  history_get_all: TypedContractMethod<
    [_owner: AddressLike],
    [Type.OrderStructOutput[]],
    "view"
  >;

  history_get_by_index: TypedContractMethod<
    [_owner: AddressLike, _i: BigNumberish],
    [Type.OrderStructOutput],
    "view"
  >;

  history_get_count: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  history_push: TypedContractMethod<
    [_order: Type.OrderStruct],
    [string],
    "nonpayable"
  >;

  history_remove: TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;

  history_set: TypedContractMethod<
    [_order: Type.OrderStruct],
    [void],
    "nonpayable"
  >;

  history_set_state: TypedContractMethod<
    [_key: BytesLike, _state: BigNumberish],
    [void],
    "nonpayable"
  >;

  history_transfer: TypedContractMethod<
    [_to: AddressLike, _key: BytesLike],
    [void],
    "nonpayable"
  >;

  info: TypedContractMethod<[], [IdApp.InfoStructOutput], "view">;

  name: TypedContractMethod<[], [string], "view">;

  service: TypedContractMethod<[_id: BigNumberish], [string], "view">;

  set_auth: TypedContractMethod<[_auth: AddressLike], [void], "nonpayable">;

  set_description: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  set_info: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string
    ],
    [void],
    "nonpayable"
  >;

  set_name: TypedContractMethod<[_name: string], [void], "nonpayable">;

  set_permission: TypedContractMethod<
    [_address: AddressLike, _permission: boolean],
    [void],
    "nonpayable"
  >;

  set_service: TypedContractMethod<
    [_id: BigNumberish, _service: AddressLike],
    [void],
    "nonpayable"
  >;

  set_symbol: TypedContractMethod<[_symbol: string], [void], "nonpayable">;

  set_url: TypedContractMethod<[_url: string], [void], "nonpayable">;

  set_user_img: TypedContractMethod<[_img: string], [void], "nonpayable">;

  set_user_name: TypedContractMethod<[_name: string], [void], "nonpayable">;

  set_user_profile: TypedContractMethod<
    [_name: string, _img: string],
    [void],
    "nonpayable"
  >;

  set_version: TypedContractMethod<[_version: string], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  url: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add_service"
  ): TypedContractMethod<[_service: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "ban_check"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ban_user"
  ): TypedContractMethod<
    [_user: AddressLike, _state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "check_permission"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "credit_decrease_point"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_decrease_point_score"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_decrease_score"
  ): TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_get_point"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "credit_get_point_score"
  ): TypedContractMethod<[_user: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "credit_get_score"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "credit_get_user"
  ): TypedContractMethod<[_user: AddressLike], [Type.UserStructOutput], "view">;
  getFunction(
    nameOrSignature: "credit_get_user_info"
  ): TypedContractMethod<
    [_user: AddressLike],
    [Type.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "credit_increase_point"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_increase_point_score"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_increase_score"
  ): TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_set_point"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_set_point_score"
  ): TypedContractMethod<
    [_user: AddressLike, _point: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credit_set_score"
  ): TypedContractMethod<
    [_user: AddressLike, _score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "get_service"
  ): TypedContractMethod<[], [IdApp.ServiceStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "history_get"
  ): TypedContractMethod<[_key: BytesLike], [Type.OrderStructOutput], "view">;
  getFunction(
    nameOrSignature: "history_get_all"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [Type.OrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "history_get_by_index"
  ): TypedContractMethod<
    [_owner: AddressLike, _i: BigNumberish],
    [Type.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "history_get_count"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "history_push"
  ): TypedContractMethod<[_order: Type.OrderStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "history_remove"
  ): TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "history_set"
  ): TypedContractMethod<[_order: Type.OrderStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "history_set_state"
  ): TypedContractMethod<
    [_key: BytesLike, _state: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "history_transfer"
  ): TypedContractMethod<
    [_to: AddressLike, _key: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<[], [IdApp.InfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "service"
  ): TypedContractMethod<[_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "set_auth"
  ): TypedContractMethod<[_auth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_description"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_info"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _version: string,
      _url: string,
      _description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_name"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_permission"
  ): TypedContractMethod<
    [_address: AddressLike, _permission: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_service"
  ): TypedContractMethod<
    [_id: BigNumberish, _service: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_symbol"
  ): TypedContractMethod<[_symbol: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_url"
  ): TypedContractMethod<[_url: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_user_img"
  ): TypedContractMethod<[_img: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_user_name"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_user_profile"
  ): TypedContractMethod<[_name: string, _img: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_version"
  ): TypedContractMethod<[_version: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "url"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
