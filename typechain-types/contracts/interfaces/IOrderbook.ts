/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Type {
  export type TickStruct = { price: BigNumberish; balance: BigNumberish };

  export type TickStructOutput = [price: bigint, balance: bigint] & {
    price: bigint;
    balance: bigint;
  };
}

export interface IOrderbookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "check"
      | "claim"
      | "get_info"
      | "get_ticks"
      | "liquidation"
      | "margin"
      | "order"
      | "set_lock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Ask"
      | "Bid"
      | "Buy"
      | "Cancel"
      | "Claim"
      | "Close"
      | "Liquidation"
      | "Long"
      | "Sell"
      | "Short"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "check", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "get_info", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_ticks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "margin",
    values: [BytesLike, boolean, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "order",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "set_lock", values: [boolean]): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_ticks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "margin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_lock", data: BytesLike): Result;
}

export namespace AskEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _quantity: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _quantity: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _quantity: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _quantity: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _quantity: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _quantity: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _quantity: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _quantity: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LongEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _leverage: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _leverage: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _leverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _quantity: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _quantity: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShortEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _sell: AddressLike,
    _amount: BigNumberish,
    _price: BigNumberish,
    _buy: AddressLike,
    _leverage: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _sell: string,
    _amount: bigint,
    _price: bigint,
    _buy: string,
    _leverage: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _sell: string;
    _amount: bigint;
    _price: bigint;
    _buy: string;
    _leverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrderbook extends BaseContract {
  connect(runner?: ContractRunner | null): IOrderbook;
  waitForDeployment(): Promise<this>;

  interface: IOrderbookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;

  check: TypedContractMethod<[_key: BytesLike], [boolean], "view">;

  claim: TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;

  get_info: TypedContractMethod<
    [],
    [[string, string, string, bigint, bigint, bigint, bigint, boolean]],
    "view"
  >;

  get_ticks: TypedContractMethod<
    [_category: BigNumberish, _range: BigNumberish],
    [Type.TickStructOutput[]],
    "view"
  >;

  liquidation: TypedContractMethod<[_key: BytesLike], [boolean], "view">;

  margin: TypedContractMethod<
    [
      _key: BytesLike,
      _type: boolean,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  order: TypedContractMethod<
    [
      _option: BigNumberish,
      _sell: AddressLike,
      _amount: BigNumberish,
      _margin: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "payable"
  >;

  set_lock: TypedContractMethod<[_lock: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "check"
  ): TypedContractMethod<[_key: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_key: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get_info"
  ): TypedContractMethod<
    [],
    [[string, string, string, bigint, bigint, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_ticks"
  ): TypedContractMethod<
    [_category: BigNumberish, _range: BigNumberish],
    [Type.TickStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidation"
  ): TypedContractMethod<[_key: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "margin"
  ): TypedContractMethod<
    [
      _key: BytesLike,
      _type: boolean,
      _token: AddressLike,
      _amount: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "order"
  ): TypedContractMethod<
    [
      _option: BigNumberish,
      _sell: AddressLike,
      _amount: BigNumberish,
      _margin: BigNumberish,
      _price: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "set_lock"
  ): TypedContractMethod<[_lock: boolean], [void], "nonpayable">;

  getEvent(
    key: "Ask"
  ): TypedContractEvent<
    AskEvent.InputTuple,
    AskEvent.OutputTuple,
    AskEvent.OutputObject
  >;
  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "Cancel"
  ): TypedContractEvent<
    CancelEvent.InputTuple,
    CancelEvent.OutputTuple,
    CancelEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Close"
  ): TypedContractEvent<
    CloseEvent.InputTuple,
    CloseEvent.OutputTuple,
    CloseEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "Long"
  ): TypedContractEvent<
    LongEvent.InputTuple,
    LongEvent.OutputTuple,
    LongEvent.OutputObject
  >;
  getEvent(
    key: "Sell"
  ): TypedContractEvent<
    SellEvent.InputTuple,
    SellEvent.OutputTuple,
    SellEvent.OutputObject
  >;
  getEvent(
    key: "Short"
  ): TypedContractEvent<
    ShortEvent.InputTuple,
    ShortEvent.OutputTuple,
    ShortEvent.OutputObject
  >;

  filters: {
    "Ask(address,address,uint256,uint256,address)": TypedContractEvent<
      AskEvent.InputTuple,
      AskEvent.OutputTuple,
      AskEvent.OutputObject
    >;
    Ask: TypedContractEvent<
      AskEvent.InputTuple,
      AskEvent.OutputTuple,
      AskEvent.OutputObject
    >;

    "Bid(address,address,uint256,uint256,address)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "Buy(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "Cancel(address,address,uint256,uint256,address)": TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;
    Cancel: TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;

    "Claim(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Close(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;
    Close: TypedContractEvent<
      CloseEvent.InputTuple,
      CloseEvent.OutputTuple,
      CloseEvent.OutputObject
    >;

    "Liquidation(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "Long(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      LongEvent.InputTuple,
      LongEvent.OutputTuple,
      LongEvent.OutputObject
    >;
    Long: TypedContractEvent<
      LongEvent.InputTuple,
      LongEvent.OutputTuple,
      LongEvent.OutputObject
    >;

    "Sell(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;
    Sell: TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;

    "Short(address,address,uint256,uint256,address,uint256)": TypedContractEvent<
      ShortEvent.InputTuple,
      ShortEvent.OutputTuple,
      ShortEvent.OutputObject
    >;
    Short: TypedContractEvent<
      ShortEvent.InputTuple,
      ShortEvent.OutputTuple,
      ShortEvent.OutputObject
    >;
  };
}
